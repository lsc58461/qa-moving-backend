// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  id              String         @id @default(uuid())
  userType        UserType
  name            String?
  email           String?        @unique
  phoneNumber     String?
  password        String?
  profileImageUrl String?
  refreshToken    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Notification    Notification[]
}

model Customer {
  customerId                String                      @id @default(uuid())
  openMovingInfoId          String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Favorite                  Favorite[]
  MovingInfo                MovingInfo[]
  Estimate                  Estimate[]
  DesignatedEstimateRequest DesignatedEstimateRequest[]
}

model Mover {
  moverId                   String                      @id @default(uuid())
  career                    String?
  confirmedCount            Int?
  oneLineIntroduction       String?
  detailDescription         String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Favorite                  Favorite[]
  Estimate                  Estimate[]
  DesignatedEstimateRequest DesignatedEstimateRequest[]
  ServiceableArea           ServiceableArea[]
  ServiceType               ServiceType[]
}

model ServiceType {
  id      String       @id @default(uuid())
  mover   Mover        @relation(fields: [moverId], references: [moverId])
  moverId String
  type    ServiceTypes
}

model ServiceableArea {
  id      String           @id @default(uuid())
  mover   Mover            @relation(fields: [moverId], references: [moverId])
  moverId String
  area    ServiceableAreas
}

model Favorite {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [customerId])
  customerId String
  mover      Mover    @relation(fields: [moverId], references: [moverId])
  moverId    String
}

model Notification {
  id               String           @id @default(uuid())
  user             UserInfo         @relation(fields: [userId], references: [id])
  userId           String
  notificationType NotificationType
  message          String
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model MovingInfo {
  id                        String                      @id @default(uuid())
  customer                  Customer                    @relation(fields: [customerId], references: [customerId])
  customerId                String
  moverId                   String?
  movingType                ServiceTypes
  movingDate                DateTime
  startAddress              String
  endAddress                String
  serviceableArea           ServiceableAreas
  isConfirmed               Boolean                     @default(false)
  isDone                    Boolean                     @default(false)
  estimateCount             Int                         @default(0)
  designatedCount           Int                         @default(0)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Estimate                  Estimate[]
  DesignatedEstimateRequest DesignatedEstimateRequest[]
}

model DesignatedEstimateRequest {
  id           String     @id @default(uuid())
  movingInfo   MovingInfo @relation(fields: [movingInfoId], references: [id])
  movingInfoId String
  customer     Customer   @relation(fields: [customerId], references: [customerId])
  customerId   String
  mover        Mover      @relation(fields: [moverId], references: [moverId])
  moverId      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Estimate {
  id           String     @id @default(uuid())
  movingInfo   MovingInfo @relation(fields: [movingInfoId], references: [id])
  movingInfoId String
  customer     Customer   @relation(fields: [customerId], references: [customerId])
  customerId   String
  mover        Mover      @relation(fields: [moverId], references: [moverId])
  moverId      String
  reviewId     String?
  price        Int
  comment      String?
  isConfirmed  Boolean?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Review {
  id           String   @id @default(uuid())
  estimateId   String
  movingInfoId String
  customerId   String
  moverId      String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// -------------------- enum --------------------

enum UserType {
  CUSTOMER
  MOVER
}

enum ServiceTypes {
  SMALL
  HOME
  OFFICE
}

enum ServiceableAreas {
  SEOUL
  GYEINGGI
  INCHEON
  GANGWON
  CHUNGBUK
  CHUNGNAM
  SEJONG
  DAEJEON
  JEONBUK
  JEONNAM
  GWANGJU
  GYEONGBUK
  GYEONGNAM
  DAEGU
  ULSAN
  BUSAN
  JEJU
}

enum NotificationType {
  ESTIMATE
  CONFIRMED
  MOVINGDAY
}
